interface Node {
  id: ID!
}

type Viewer implements Node {
  id: ID!
  user: User!
  repositories: [Repository]!
}

type User implements Node {
  id: ID!
  userID: ID!
  firstName: String!
  lastName: String!
  fullName: String!
  email: String!
}

type Repository implements Node {
  id: ID!
  repositoryID: ID!
  name: String!
  externalCSSURI: String
  rootCSS: String
  lastUpdatedTimestamp: Int!

  componentsCount: Int!
  components: [Component]!
}

type Component implements Node {
  id: ID!
  componentID: ID!
  name: String!
  repository: Repository!
  filepath: String!
  compiledBundleURI: String!
  reactDoc: String!
  overrideReactDoc: String
  examples: [Example]!
  githubURL: String
}

type Example implements Node {
  id: ID!
  exampleID: ID!
  name: String!
  component: Component!
  code: String!
  serializedElement: String
}

type Query {
  viewer: Viewer
  node(id: ID!): Node
  user(userID: ID!): User
  repository(repositoryID: ID!): Repository
  component(componentID: ID!): Component
  example(exampleID: ID!): Example
}


input OverrideComponentReactDocInput {
  clientMutationId: String
  componentID: ID!
  overrideReactDoc: String!
}

type OverrideComponentReactDocPayload {
  clientMutationId: String
  success: Boolean!
  component: Component!
}


input SetExampleCodeInput {
  clientMutationId: String
  exampleID: ID!
  code: String!
  serializedElement: String
}

type SetExampleCodePayload {
  clientMutationId: String
  success: Boolean!
  example: Example!
}


input AddExampleCodeInput {
  clientMutationId: String
  componentID: ID!
  exampleName: String!
  code: String!
  serializedElement: String
}

type AddExampleCodePayload {
  clientMutationId: String
  success: Boolean!
  component: Component!
  example: Example
}


type Mutation {
  overrideComponentReactDoc(input: OverrideComponentReactDocInput!): OverrideComponentReactDocPayload
  setExampleCode(input: SetExampleCodeInput!): SetExampleCodePayload
  addExampleCode(input: AddExampleCodeInput!): AddExampleCodePayload
}
